// src/contexts/GlobalRefreshContext.tsx
import React, { createContext, useContext, ReactNode, useRef, useCallback } from 'react';

const REFRESH_TICK_RATE = 60000; // Atualiza a cada 60 segundos (aumentado para reduzir chamadas)

interface GlobalRefreshContextType {
  tick: number;
  isRefreshing: boolean;
}

const GlobalRefreshContext = createContext<GlobalRefreshContextType | undefined>(undefined);

export const GlobalRefreshProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [tick, setTick] = React.useState(0);
  const [isRefreshing, setIsRefreshing] = React.useState(false);
  const timerRef = React.useRef<NodeJS.Timeout | null>(null);
  const isFirstRender = React.useRef(true);
  
  // Função para agendar a próxima atualização
  const scheduleNextUpdate = useCallback(() => {
    // Limpar qualquer timer existente
    if (timerRef.current) {
      clearTimeout(timerRef.current);
    }
    
    // Agendar a próxima atualização
    timerRef.current = setTimeout(() => {
      setIsRefreshing(true);
      setTick(prev => prev + 1);
      
      // Liberar o bloqueio após um delay
      setTimeout(() => {
        setIsRefreshing(false);
        // Agendar a próxima atualização apenas quando terminar
        scheduleNextUpdate();
      }, 2000);
    }, REFRESH_TICK_RATE);
  }, []);
  
  // Inicializar o timer e disparar o primeiro tick
  React.useEffect(() => {
    // Disparar o primeiro tick após um pequeno delay
    if (isFirstRender.current) {
      isFirstRender.current = false;
      setTimeout(() => {
        setTick(1);
      }, 500);
    }
    
    // Iniciar o timer para atualizações periódicas
    scheduleNextUpdate();
    
    // Limpar o timer quando o componente for desmontado
    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [scheduleNextUpdate]);

  return (
    <GlobalRefreshContext.Provider value={{ tick, isRefreshing }}>
      {children}
    </GlobalRefreshContext.Provider>
  );
};

export const useGlobalRefresh = () => {
  const context = useContext(GlobalRefreshContext);
  if (!context) {
    throw new Error('useGlobalRefresh must be used within a GlobalRefreshProvider');
  }
  return context;
};