/* Header + Cards fixos */

.monitoring-fixed-header {
    position: fixed !important;
    top: var(--header-height) !important;
    left: var(--sidebar-width) !important;
    right: 0 !important;
    z-index: 999 !important;
    background: var(--bg-primary) !important;
    border-bottom: 1px solid var(--border-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    padding: 25px;
    transition: left 0.25s ease-in-out;
}

.sidebar.collapsed~.main-content-wrapper .monitoring-fixed-header {
    left: var(--sidebar-width-collapsed) !important;
}

.monitoring-view {
    padding-top: 0 !important;
}

.cards-container {
    padding: 0.5rem 0 0 0;
}

.grid-last-updated {
    margin-bottom: 1rem;
}

.scrollable-content {
    margin-top: 320px;
    flex: 1;
    padding: 0 25px;
}


/* Efeito suave nos botões */

.button-refresh {
    transition: all 0.4s ease;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-color-dark));
    border: 1px solid rgba(var(--primary-color-rgb), 0.3);
    color: white;
    padding: 0.6rem 1.2rem;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 2px 8px rgba(var(--primary-color-rgb), 0.2);
    font-weight: 500;
}

.button-refresh:hover {
    background: linear-gradient(135deg, var(--primary-color-dark), var(--primary-color));
    border-color: rgba(var(--primary-color-rgb), 0.5);
    box-shadow: 0 4px 16px rgba(var(--primary-color-rgb), 0.3);
    transform: translateY(-1px);
}

.button-refresh.refreshing {
    background: linear-gradient(135deg, var(--primary-color-light), var(--primary-color));
    animation: pulse-glow 3s ease-in-out infinite;
    color: #ffffff;
    font-weight: 600;
}

.button-refresh.refreshing svg {
    animation: rotate-slow 2s linear infinite;
}

@keyframes pulse-glow {
    0%,
    100% {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-color-dark));
        box-shadow: 0 2px 12px rgba(var(--primary-color-rgb), 0.3);
        border-color: rgba(var(--primary-color-rgb), 0.4);
        opacity: 1;
    }
    25% {
        opacity: 0.8;
    }
    50% {
        background: linear-gradient(135deg, var(--primary-color-light), var(--primary-color));
        box-shadow: 0 4px 20px rgba(var(--primary-color-rgb), 0.5);
        border-color: rgba(var(--primary-color-rgb), 0.6);
        opacity: 0.9;
    }
    75% {
        opacity: 0.85;
    }
}

@keyframes rotate-slow {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}


/* Feedback toast */

.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.toast {
    background: var(--white);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    padding: 1rem 1.2rem;
    margin-bottom: 0.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 320px;
    animation: slideIn 0.4s ease-out;
    color: var(--text-primary);
    font-weight: 500;
}

html[data-theme='dark'] .toast {
    background: var(--card-bg);
    color: var(--text-primary);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
}

.toast.success {
    border-left: 4px solid var(--success-color);
    background: linear-gradient(135deg, rgba(var(--success-color-rgb), 0.4), #768d81);
    color: #155724;
    font-weight: 700;
}

html[data-theme='dark'] .toast.success {
    background: linear-gradient(135deg, rgba(var(--success-color-rgb), 0.3), #768d81);
    color: var(--white-color);
}

.toast.error {
    border-left: 4px solid var(--error-color);
    background: linear-gradient(135deg, rgba(var(--error-color-rgb), 0.4), #ffffff);
    color: #721c24;
    font-weight: 700;
}

html[data-theme='dark'] .toast.error {
    background: linear-gradient(135deg, rgba(var(--error-color-rgb), 0.4), var(--card-bg));
    color: var(--text-primary);
}

.toast svg {
    font-size: 1.2em;
    flex-shrink: 0;
}

.toast.success svg {
    color: var(--success-color);
}

.toast.error svg {
    color: var(--error-color);
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOut {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(100%);
        opacity: 0;
    }
}

.toast.removing {
    animation: slideOut 0.3s ease-in forwards;
}


/* Cores dos cards para harmonia */

.highlight-card.status,
.highlight-card.queue,
.highlight-card.firebird,
.highlight-card.drive {
    border-top: 3px solid;
}

.highlight-card.status {
    border-top-color: var(--success-color);
}

.highlight-card.queue {
    border-top-color: var(--warning-color);
    border-top-width: 3px;
}

.highlight-card.firebird {
    border-top-color: var(--info-color);
}

.highlight-card.drive {
    border-top-color: var(--primary-color);
}


/*
  ==========================================================================
   PADRÃO PARA GRIDS COM CABEÇALHO FIXO E CONTEÚDO ROLÁVEL
   (Use estas classes no seu HTML para estruturar as views de grid)
  ==========================================================================
*/


/* 1. O contêiner do cabeçalho da sua view (que contém título, busca, botões, etc.) */

.admin-areas-fixed-header {
    position: fixed !important;
    /* Fixa o header em relação à viewport. */
    top: var(--header-height) !important;
    /* Posiciona abaixo do header principal da aplicação. */
    left: var(--sidebar-width) !important;
    /* Alinha com o início da área de conteúdo. */
    right: 0 !important;
    /* Estica até o final da tela. */
    z-index: 999 !important;
    /* Garante que fique acima do conteúdo que rola. */
    background: var(--bg-primary) !important;
    /* Usa a cor de fundo primária do tema para se mesclar. */
    border-bottom: 1px solid var(--border-color);
    /* Linha sutil de separação. */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    /* Sombra para dar profundidade. */
    padding: 25px;
    transition: left 0.25s ease-in-out;
    /* Anima a transição quando a sidebar colapsa. */
}


/* 2. Ajuste de posição para quando a sidebar estiver colapsada */

.sidebar.collapsed~.main-content-wrapper .admin-areas-fixed-header {
    left: var(--sidebar-width-collapsed) !important;
}


/* 3. O contêiner da sua tabela */

.admin-areas-table-container {
    /* Define uma margem no topo para empurrar a tabela para baixo,
       evitando que ela fique escondida atrás do header fixo.
       O valor de 140px é um exemplo calculado da altura do .admin-areas-fixed-header.
       (Ex: 25px padding-top + ~90px de conteúdo + 25px padding-bottom = 140px).
       Ajuste este valor se a altura do seu header fixo mudar. */
    margin-top: 140px;
    padding: 0 25px;
    /* Padding lateral para o contêiner da tabela. */
}


/* 4. A Tabela de Dados (`<table class="data-table">`) */

.admin-areas-table-container .data-table {
    display: block;
    /* Essencial: Trata a tabela como um bloco para permitir controle de overflow no tbody. */
    width: 100%;
}


/* 5. O Cabeçalho da Tabela (`<thead>`) */

.admin-areas-table-container .data-table thead {
    display: block;
    /* Mantém o thead visível e estático, pois não terá overflow. */
    position: relative;
}


/* 6. As Linhas (`<tr>`) do Cabeçalho e Corpo - A CORREÇÃO DE ALINHAMENTO */

.admin-areas-table-container .data-table thead tr,
.admin-areas-table-container .data-table tbody tr {
    display: table;
    /* Faz as linhas se comportarem como tabelas. */
    width: 100%;
    /* Garante que ocupem todo o espaço. */
    table-layout: fixed;
    /* Força as colunas a terem larguras consistentes, alinhando a cabeça e o corpo. */
}


/* 7. O Corpo da Tabela (`<tbody>`) - A ÁREA ROLÁVEL */

.admin-areas-table-container .data-table tbody {
    display: block;
    /* Essencial: Permite que o tbody tenha uma altura definida e overflow. */
    overflow-y: auto;
    /* Adiciona a barra de rolagem vertical QUANDO o conteúdo ultrapassar a altura. */
    width: 100%;
    /*
     * CÁLCULO DA ALTURA: Preenche o restante da altura da viewport.
     * 100vh = Altura total da tela.
     * var(--header-height) = Altura do header principal (ex: 60px).
     * 140px = A `margin-top` que demos ao `.admin-areas-table-container` (altura do header fixo).
     * 40px = Um espaço extra para o footer da página e paddings. AJUSTE CONFORME NECESSÁRIO.
    */
    height: calc(100vh - var(--header-height) - 140px - 40px);
}


/*
  ==========================================================================
   FIM DO PADRÃO DE GRIDS
  ==========================================================================
*/


/* Responsividade */

@media (max-width: 768px) {
    .monitoring-fixed-header,
    .admin-areas-fixed-header {
        left: var(--sidebar-width-collapsed);
        top: calc(var(--header-height) - 10px);
        /* Ajusta para header menor em mobile. */
        padding: 20px 15px;
    }
    .scrollable-content {
        margin-top: 300px;
        padding: 0 15px;
    }
    .admin-areas-table-container {
        /* Ajusta a margem e padding para telas menores */
        margin-top: 120px;
        padding: 0 15px;
    }
    .admin-areas-table-container .data-table tbody {
        /* Recalcula a altura do tbody para telas menores */
        height: calc(100vh - (var(--header-height) - 10px) - 120px - 30px);
    }
}